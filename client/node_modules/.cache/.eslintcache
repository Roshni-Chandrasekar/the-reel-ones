[{"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/index.js":"1","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/reportWebVitals.js":"2","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/App.js":"3","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Films.js":"4","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Navbar.js":"5","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Home.js":"6","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Profile.js":"7","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Login.js":"8","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Register.js":"9","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Cart.js":"10","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Docs.js":"11"},{"size":628,"mtime":1667513538214,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1667513538215,"results":"14","hashOfConfig":"13"},{"size":1380,"mtime":1667950530347,"results":"15","hashOfConfig":"13"},{"size":3601,"mtime":1667950530348,"results":"16","hashOfConfig":"13"},{"size":748,"mtime":1667950530349,"results":"17","hashOfConfig":"13"},{"size":443,"mtime":1667950530348,"results":"18","hashOfConfig":"13"},{"size":109,"mtime":1667950530349,"results":"19","hashOfConfig":"13"},{"size":1133,"mtime":1667950530349,"results":"20","hashOfConfig":"13"},{"size":1136,"mtime":1667950530349,"results":"21","hashOfConfig":"13"},{"size":100,"mtime":1667950530348,"results":"22","hashOfConfig":"13"},{"size":8130,"mtime":1667950530348,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1p17ktc",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/index.js",[],[],[],"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/reportWebVitals.js",[],[],"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/App.js",["63","64","65","66"],[],"import { useEffect, useState } from \"react\";\nimport { Link, Route, Routes, BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Films from \"./components/Films\";\nimport Profile from \"./components/Profile\";\nimport Register from \"./components/Register\";\nimport Cart from \"./components/Cart\";\nimport Docs from \"./components/Docs\";\n\nconst App = () => {\n  const [userData, setUserData] = useState(false);\n  const [token, setToken] = useState(0);\n\n  const [films, setFilms] = useState([]);\n\n  const fetchFilms = async () => {\n    const response = await fetch(\"/api/films\");\n    const data = await response.json();\n    // console.log(data);\n    setFilms(data.films);\n  };\n\n  useEffect(() => {\n    fetchFilms();\n  }, []);\n\n  return (\n    <div>\n      <Navbar userData={userData} setToken={setToken} />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/register\" element={<Register />} />\n        <Route path=\"/films\" element={<Films films={films} />} />\n        <Route path=\"/profile\" element={<Profile />} />\n        <Route path=\"/cart\" element={<Cart />} />\n        <Route path=\"/api/docs\" element={<Docs />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Films.js",["67","68","69","70"],[],"import React, { useEffect, useState } from \"react\";\n\nconst Films = ({ films }) => {\n  const [genreSearchInput, setGenreSearchInput] = useState(\"\");\n  const [directorSearchInput, setDirectorSearchInput] = useState(\"\");\n  const [filteredFilms, setFilteredFilms] = useState(films);\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    search();\n  }, [query, films]);\n\n  const filmSearchInputHandler = (event) => {\n    setQuery(event.target.value);\n  };\n\n  const genreSearchHandler = (event) => {\n    setGenreSearchInput(event.target.value);\n  };\n\n  const directorSearchHandler = (event) => {\n    setDirectorSearchInput(event.target.value);\n  };\n\n  const filmSearchFormHandler = (event) => {\n    // event.preventDefault();\n    // if (!query && !directorSearchInput && !genreSearchInput) {\n    //   console.log(\"user attempting to submit a blank form\");\n    //   alert(\"You cannot submit an empty search form.\");\n    //   return;\n    // }\n    // console.log(\n    //   `attempting to send a fetch request based on user form submission: input: ${query}, genre: ${genreSearchInput}, director: ${directorSearchInput}`\n    // );\n    // put a fetch request stuff here...\n  };\n\n  const search = () => {\n    // console.log(query);\n    let searchResults = films.filter(\n      (film) =>\n        film.title.includes(query) ||\n        film.director.includes(query) ||\n        film.genre.includes(query)\n    );\n    // console.log(searchResults);\n\n    // add in a function for all permutations of the query string:\n    setFilteredFilms(searchResults);\n  };\n\n  return (\n    <div>\n      <h1>Films</h1>\n      {filteredFilms ? (\n        <div>\n          <form onSubmit={filmSearchFormHandler}>\n            <input\n              type=\"text\"\n              className=\"films-search-input\"\n              onChange={filmSearchInputHandler}\n              value={query}\n            />\n            <select onChange={genreSearchHandler}>\n              <option>Genre</option>\n              <option>Drama</option>\n            </select>\n            <select onChange={directorSearchHandler}>\n              <option>Director</option>\n              <option>Orson Welles</option>\n            </select>\n            <button>Submit</button>\n          </form>\n          <ul>\n            {filteredFilms.map((film) => {\n              // console.log(film.genre);\n              return (\n                <li>\n                  <div className=\"films-card-container\">\n                    <div className=\"film-card\">\n                      <h3>{film.title}</h3>\n                      <p>({film.year})</p>\n                      <img src={film.img} />\n                      <div className=\"film-card-data\">\n                        <p onClick={() => setQuery(film.director)}>\n                          Director:{\" \"}\n                          <span className=\"film-data-tag\">{film.director}</span>\n                        </p>\n                        <p onClick={() => setQuery(film.genre)}>\n                          Genre:{\" \"}\n                          <span className=\"film-data-tag\">{film.genre}</span>\n                        </p>\n                        <p className=\"film-description\">{film.description}</p>\n                        <p>${film.price}/day</p>\n                        <button className=\"film-add-to-cart-btn\">\n                          Add to Cart\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default Films;\n","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Navbar.js",[],[],"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Home.js",[],[],"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Profile.js",[],[],"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Login.js",["71","72"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const usernameInputHandler = (event) => {\n    event.preventDefault();\n  };\n\n  const passwordInputHandler = (event) => {\n    event.preventDefault();\n  };\n\n  const loginHandler = (event) => {\n    event.preventDefault();\n\n    if (!username || !password) {\n      alert(\"You must enter a username and password.\");\n      return;\n    }\n\n    console.log(\n      `user attempting to login with username: ${username}, password: ${password}`\n    );\n  };\n\n  return (\n    <div>\n      <form onSubmit={loginHandler}>\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          onChange={usernameInputHandler}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          onChange={passwordInputHandler}\n        />\n        <button>Submit</button>\n        <p>\n          <Link to=\"/register\">Don't have an account yet?</Link>\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Register.js",["73","74"],[],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Register = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const usernameInputHandler = (event) => {\n    event.preventDefault();\n  };\n\n  const passwordInputHandler = (event) => {\n    event.preventDefault();\n  };\n\n  const registerHandler = (event) => {\n    event.preventDefault();\n\n    if (!username && !password) {\n      alert(\"You must enter a username and password\");\n      return;\n    }\n\n    console.log(\n      `user attempting to register account: ${username}, password: ${password}`\n    );\n  };\n\n  return (\n    <div>\n      <form onSubmit={registerHandler}>\n        <input\n          type=\"text\"\n          placeholder=\"Username\"\n          onChange={usernameInputHandler}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          onChange={passwordInputHandler}\n        />\n        <button>Submit</button>\n        <p>\n          <Link to=\"/login\">Already have an account?</Link>\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n","/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Cart.js",[],[],"/Users/roshnichandrasekar/Desktop/Bootcamp/the-reel-ones/client/src/components/Docs.js",["75"],[],"import React from \"react\";\n\nconst Docs = () => {\n  return (\n    <div>\n      <h1>API Documentation</h1>\n      <h2>Introduction</h2>\n      <p>\n        Despite being a full stack application, The Real Ones offers an API with\n        various endpoints, for various use cases for designing front end\n        applications.\n      </p>\n      <h2>API URL Format</h2>\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n        commodo consequat.\n      </p>\n      <ul className=\"api-docs-list\">\n        <li>\n          The base URL is{\" \"}\n          <span className=\"bold\">https://the-reel-ones.example.com</span>\n        </li>\n        <li>\n          The first segment of every path is <span className=\"bold\">/api</span>\n        </li>\n        <li>\n          The next segment will be the endpoint, e.g.{\" \"}\n          <span className=\"bold\">/films</span>\n        </li>\n        <li>\n          So, an example URL would look like{\" \"}\n          <span className=\"bold\">\n            https://the-reel-ones.example.com/api/films\n          </span>\n        </li>\n      </ul>\n      <h2>Authentication Through JSON Web Tokens</h2>\n      <p>\n        When using the API, many calls are made in the context of a{\" \"}\n        <span className=\"bold\">registered user</span>. The API protects itself\n        by requiring a token string passed in the Header for requests made in\n        that context.\n      </p>\n      <p>\n        Additionally, some calls are made in the context of an{\" \"}\n        <span className=\"bold\">admin user</span>. For these calls the API\n        requires a token string passed in the Header for requests made in that\n        context.\n      </p>\n      <p>\n        A sample request <span className=\"bold\">with</span> an{\" \"}\n        <span className=\"bold\">authorization</span> or{\" \"}\n        <span className=\"bold\">admin</span> token looks like this:\n      </p>\n      <div className=\"sample-code\">\n        <code>\n          {`fetch(`}\n          <span className=\"code-ex-string\">{`\"https://the-reel-ones.example.com/api/films/rent\"`}</span>\n          {`, {`}\n          <br />\n          <span className=\"code-line\">\n            <span className=\"code-ex-header\">{`\n            method`}</span>\n            {`: \"POST\",`}\n          </span>\n          <br />\n          <span className=\"code-line\">\n            <span className=\"code-ex-header\">{`\n            headers`}</span>\n            {`: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer TOKEN_STRING_HERE\",\n            },`}\n          </span>\n          <br />\n          <span className=\"code-line\">\n            <span className=\"code-ex-header\">\n              {`\n            body`}\n            </span>\n            {`: `}\n            <span className=\"code-ex-red\">{`JSON`}</span>\n            {`.stringify({`}\n            <span className=\"code-ex-comment\">{`\n              /* request body to API */`}</span>\n            {`\n            }),`}\n          </span>\n          <br />\n          <span className=\"code-line\">\n            {`\n          })`}\n          </span>\n        </code>\n      </div>\n      <p>\n        The value for <span className=\"bold\">Authorization</span> must be a\n        string starting with 'Bearer', followed by a space and then the token\n        you received by either registering or logging in. Requests without this\n        format will prevent the API from recognizing the token. If the string is\n        not formatted properly, or the token is malformed, revoked, or\n        unrecognized you will receive an error response like this:\n      </p>\n      <div className=\"sample-code\">\n        <code>\n          {`{`}\n          <br />\n          <span className=\"code-line\">{`\"success\": false,`}</span>\n          <br />\n          <span className=\"code-line\">{`\"error\": {`}</span>\n          <br />\n          <span className=\"code-line-2\">{`\"type\": \"InvalidToken\",`}</span>\n          <br />\n          <span className=\"code-line-2\">{`\"message\": \"Invalid token, please register or log in\"`}</span>\n          <br />\n          <span className=\"code-line\">{`},`}</span>\n          <br />\n          <span className=\"code-line\">{`\"data\": null`}</span>\n          <br />\n          {`}`}\n        </code>\n      </div>\n      <h2>Return Schema</h2>\n      <p>\n        In general, you will receive a return schema with either{\" \"}\n        <span className=\"bold\">success: true</span> or{\" \"}\n        <span className=\"bold\">success: false</span>. The return schema should\n        look similar to this:\n      </p>\n      <div className=\"sample-code\">\n        <code>\n          {`{`}\n          <br />\n          <span className=\"code-line\">\n            <span className=\"code-ex-header\">{`success`}</span>\n            {`: `}\n            <span className=\"code-ex-string\">{`false`}</span>\n            {`, `}\n            <span className=\"code-ex-comment\">{` // or true `}</span>\n          </span>\n          <br />\n          <span className=\"code-line\">\n            <span className=\"code-ex-header\">{`error`}</span>\n            {`: {`}\n          </span>\n          <br />\n          <span className=\"code-line-2\">\n            <span className=\"code-ex-header\">{`name`}</span>\n            {`: `}\n            <span className=\"code-ex-string\">{`\"SampleError\"`}</span>\n            {`,`}\n          </span>\n          <br />\n          <span className=\"code-line-2\">\n            <span className=\"code-ex-header\">{`message`}</span>\n            {`: `}\n            <span className=\"code-ex-string\">{`\"This is a sample error message\"`}</span>\n          </span>\n          <br />\n          <span className=\"code-line\">\n            {`}, `}\n            <span className=\"code-ex-comment\">{` // or null`}</span>\n          </span>\n          <br />\n          <span className=\"code-line\">\n            <span className=\"code-ex-header\">{`data`}</span>\n            {`: {`}\n          </span>\n          <br />\n          <span className=\"code-line-2\">\n            <span className=\"code-ex-header\">{`user: `}</span>\n            {`{ `}\n            <span className=\"code-ex-header\">{`username`}</span>:{\" \"}\n            <span className=\"code-ex-string\">\"JohnDoe\"</span>\n            {` },`}\n          </span>\n          <br />\n          <span className=\"code-line-2\">\n            <span className=\"code-ex-header\">message</span>:{\" \"}\n            <span className=\"code-ex-string\">\n              \"this is a sample call response message\"\n            </span>\n            <br />\n            <span className=\"code-line\">{`}`}</span>\n            <span className=\"code-ex-comment\"> // or null</span>\n          </span>\n          <br />\n          {`}`}\n        </code>\n      </div>\n      <h2>User Endpoints</h2>\n      <p className=\"endpoint-ex\">\n        <code>POST /api/users/register</code>\n      </p>\n      <p>\n        This route is used to create a new user account. On success you will be\n        given a JSON Web Token to be passed to the server for requests requiring\n        authentication.\n      </p>\n      <h3>Request Parameters</h3>\n      <ul className=\"api-docs-list\">\n        <li>\n          <span className=\"bold\">user</span> (\n          <span className=\"bold\">object</span>, required)\n          <li className=\"circle-li\">\n            <span className=\"bold\">username</span> (\n            <span className=\"bold\">string</span>, required): the desired\n            username for the new user\n          </li>\n          <li className=\"circle-li\">\n            <span className=\"bold\">password</span> (\n            <span className=\"bold\">string</span>, required): the desired\n            password for the new user\n          </li>\n        </li>\n      </ul>\n      <h3>Return Parameters</h3>\n      <ul className=\"api-docs-list\">\n        <li>\n          <span className=\"bold\">token</span> (\n          <span className=\"bold\">string</span>): the JSON Web Token which is\n          used to authenticate the user with any future calls\n        </li>\n      </ul>\n      <h3>Sample Call</h3>\n    </div>\n  );\n};\n\nexport default Docs;\n",{"ruleId":"76","severity":1,"message":"77","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"80","line":2,"column":31,"nodeType":"78","messageId":"79","endLine":2,"endColumn":44},{"ruleId":"76","severity":1,"message":"81","line":14,"column":20,"nodeType":"78","messageId":"79","endLine":14,"endColumn":31},{"ruleId":"76","severity":1,"message":"82","line":15,"column":10,"nodeType":"78","messageId":"79","endLine":15,"endColumn":15},{"ruleId":"76","severity":1,"message":"83","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":26},{"ruleId":"76","severity":1,"message":"84","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":29},{"ruleId":"85","severity":1,"message":"86","line":11,"column":6,"nodeType":"87","endLine":11,"endColumn":20,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":83,"column":23,"nodeType":"91","endLine":83,"endColumn":45},{"ruleId":"76","severity":1,"message":"92","line":5,"column":20,"nodeType":"78","messageId":"79","endLine":5,"endColumn":31},{"ruleId":"76","severity":1,"message":"93","line":6,"column":20,"nodeType":"78","messageId":"79","endLine":6,"endColumn":31},{"ruleId":"76","severity":1,"message":"92","line":5,"column":20,"nodeType":"78","messageId":"79","endLine":5,"endColumn":31},{"ruleId":"76","severity":1,"message":"93","line":6,"column":20,"nodeType":"78","messageId":"79","endLine":6,"endColumn":31},{"ruleId":"94","severity":1,"message":"95","line":187,"column":47,"nodeType":"96","messageId":"97","endLine":187,"endColumn":58},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'setUserData' is assigned a value but never used.","'token' is assigned a value but never used.","'genreSearchInput' is assigned a value but never used.","'directorSearchInput' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.","ArrayExpression",["98"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setUsername' is assigned a value but never used.","'setPassword' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces",{"desc":"99","fix":"100"},"Update the dependencies array to be: [query, films, search]",{"range":"101","text":"102"},[361,375],"[query, films, search]"]